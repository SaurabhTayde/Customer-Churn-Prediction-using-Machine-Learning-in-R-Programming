churn_raw <- read.csv("https://community.watsonanalytics.com/wp-content/uploads/2015/03/WA_Fn-UseC_-Telco-Customer-Churn.csv", header = T)
#Check the structure of the dataset:
str(churn_raw)
setwd('G:/DSP/Project/Case Study/Telco Churn')
#Check missing values:
colSums(is.na(churn_raw))
churn_raw[is.na(churn_raw$TotalCharges),1:6]
which(churn_raw$tenure == 0)
which(churn$tenure[,churn_raw$tenure == 0])
which(churn_raw$tenure[,churn_raw$tenure == 0])
churn_raw$tenure[,churn_raw$tenure == 0]
which(churn_raw$tenure == 0)
churn_raw$tenure[,which(churn_raw$tenure == 0)]
churn_raw[,which(churn_raw$tenure == 0)]
churn_raw[which(churn_raw$tenure == 0),]
churn_raw[which(churn_raw$tenure == 0), 1:6]
churn_raw[is.na(churn_raw$TotalCharges),1:6]
dim(churn_raw[is.na(churn_raw$TotalCharges),1:6])
dim(churn_raw[which(churn_raw$tenure == 0), 1:6])
churnnoNAs <- churn_raw[complete.cases(churn_raw),]
dim(churnnoNAs)
correlations = cor(churnnoNAs)
install.packages("ggcorrplot")
library(ggcorrplot)
correlations = cor(churnnoNAs)
#Check the structure of the dataset:
str(churn_raw)
numerical = select_if(churnnoNAs,is.numeric())
numerical = select_if(churnnoNAs,is.numeric
numerical = select_if(churnnoNAs,is.numeric)
numerical = select_if(churnnoNAs,is.factor())
numerical = select_if(churnnoNAs,is.factor()
numerical = select_if(churnnoNAs,is.factor
numerical = select_if(churnnoNAs,is.factor)
install.packages(dplyr)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
library(dplyr)
library(dplyr)
install.packages('dplyr')
library(dplyr)
library(dplyr)
numerical = select_if(churnnoNAs,is.numeric())
numerical = select_if(churnnoNAs,is.factor)
numerical = select_if(churnnoNAs,!is.factor)
categorical = select_if(churnnoNAs,is.factor)
str(categorical)
categorical = select_if(churnnoNAs,is.numeric)
numerical = select_if(churnnoNAs,is.numeric)
str(numerical)
correlations = cor(numerical)
ggcorrplot(correlations)
library(ggcorrplot)
correlations = cor(numerical)
ggcorrplot(correlations)
cor(numerical)
dim(churn_neat)
churn_neat = subset(churnnoNAs, select = -c(customerID, TotalCharges))
dim(churn_neat)
table(churn_neat$SeniorCitizen)
str(churn_neat)
factorrenames <- names(churn_neat[9:14])
data <- churn_neat %>%
mutate_at(.vars=factorrenames,
.funs=~recode_factor(., `No internet service`="No")) %>%
mutate_at(.vars="MultipleLines",
.funs=~recode_factor(., `No phone service`="No"))
str(data)
install.packages('DataExplorer')
library(DataExplorer)
plot_histogram()
plot_histogram(data)
plot_boxplot()
plot_boxplot(data)
plot_boxplot(data)
plot_boxplot(data, by)
plot_boxplot(data, by = MonthlyCharges)
plot_boxplot(data, MonthlyCharges)
plot_histogram(data, by = 'MonthlyCharges')
plot_histogram(data, by = 'MonthlyCharges')
plot_histogram(data)
plot_boxplot(data, by = 'MonthlyCharges')
boxplot(data$MonthlyCharges)
boxplot(data$)
boxplot(data$tenure)
create_report(data)
churnrate <- table(data$Churn) / nrow(data)
churnrate
set.seed(1)
rowindices <- sample(nrow(data))
data_shuffled <- data[rowindices,]
split <- round(nrow(data_shuffled) * 0.7)
split
train <- data_shuffled[1:split,]
test <- data_shuffled[(split+1):nrow(data_shuffled),]
dim(train)
dim(test)
library(caret)
control <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = FALSE
)
glm_model <- train(Churn ~ ., data = train,
method="glm",
trControl = control
)
glm_model <- train(Churn ~ ., data = train,
method="glm",
trControl = control
)
glm_model
summary(glm_model)
summary(glm_model)
library(MASS)
stepAIC(glm_model)
stepAIC(train)
library(car)
stepAIC(glm_model)
glm_model <- train(Churn ~ ., data = train,
method="glm"
)
glm_model
stepAIC(glm_model)
stepAIC('glm_model')
glm_model <- train(Churn ~ ., data = train,
family = 'binomial',
trControl = control
)
TitModel = glm(Survived ~ ., family = 'binomial', data = trainData)
TitModel = glm(Survived ~ ., family = 'binomial', data = train)
TitModel = glm(Churn ~ ., family = 'binomial', data = train)
TitModel = glm(Churn ~ ., family = 'binomial', data = train)
ChurnModel = glm(Churn ~ ., family = 'binomial', data = train)
summary(ChurnModel)
summary(ChurnModel)
library(MASS)
stepAIC(ChurnModel)
glm(formula = Churn ~ SeniorCitizen + Dependents + tenure + MultipleLines +
InternetService + OnlineSecurity + DeviceProtection + TechSupport +
StreamingTV + StreamingMovies + Contract + PaperlessBilling +
PaymentMethod + MonthlyCharges, family = "binomial", data = train)
ChurnModel_New = glm(formula = Churn ~ SeniorCitizen + Dependents + tenure + MultipleLines +
InternetService + OnlineSecurity + DeviceProtection + TechSupport +
StreamingTV + StreamingMovies + Contract + PaperlessBilling +
PaymentMethod + MonthlyCharges, family = "binomial", data = train)
summary(ChurnModel_New)
predicttrain = predict(ChurnModel_New, type = 'response')
head(predicttrain)
#Lets find mean of survived and not survived
tapply(predicttrain, trainData$Survived, mean)
#Lets find mean of survived and not survived
tapply(predicttrain, train$Churn, mean)
table(train$Churn , predicttrain>0.5)
table(train$Churn, predicttrain>0.6)
table(train$Churn, predicttrain>0.4)
table(train$Churn, predicttrain>0.45)
table(train$Churn, predicttrain>0.55)
install.packages('caret')
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
library(caret)
install.packages('caret')
install.packages("caret")
library(caret)
library(caret)
library(caret)
